image:
  - Ubuntu
  - Visual Studio 2019

version: '{build}'

stack: postgresql 13.4, docker

environment:
  PGUSER: postgres
  PGPASSWORD: Password12!
  GIT_ACCESS_TOKEN:
    secure: vw2jhp7V38fTOqphzFgnXtLwHoHRW2zM2K5RJgDAnmkoaIKT6jXLDIfkFdyVz9nJ

branches:
  only:
  - master
  - develop
  - unstable
  - /release\/.+/

pull_requests:
  do_not_increment_build_number: true

nuget:
  disable_publish_on_pr: true

matrix:
  fast_finish: true

for:
- # Visual Studio 2019
  matrix:
    only:
    - image: Visual Studio 2019
  services:
  - postgresql13
  # REF: https://github.com/docascode/docfx-seed/blob/master/appveyor.yml
  before_build:
    - pwsh: |
        if (-Not $env:APPVEYOR_PULL_REQUEST_TITLE) {
            # https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html
            git checkout $env:APPVEYOR_REPO_BRANCH -q
        }
        # Pinning to previous version, because zip of v2.58.8 (released 2d ago) is corrupt.
        # Tracked at https://github.com/dotnet/docfx/issues/7689
        choco install docfx -y --version 2.58.5
        if ($lastexitcode -ne 0) {
            throw "docfx install failed with exit code $lastexitcode."
        }
    - pwsh: |
        # Start Azure Cosmos Emulator on Windows
        if ($isWindows) {
            & .\start-cosmos-db-emulator.ps1
        }
  after_build:
    - pwsh: |
        CD ./docs
        & ./generate-examples.ps1
        & docfx docfx.json
        if ($lastexitcode -ne 0) {
            throw "docfx build failed with exit code $lastexitcode."
        }

        # https://www.appveyor.com/docs/how-to/git-push/
        git config --global credential.helper store
        Set-Content -Path "$HOME\.git-credentials" -Value "https://$($env:GIT_ACCESS_TOKEN):x-oauth-basic@github.com`n" -NoNewline
        git config --global user.email "cibuild@jsonapi.net"
        git config --global user.name "json-api-cibuild"
        git config --global core.autocrlf false
        git config --global core.safecrlf false
        git clone https://github.com/json-api-dotnet/JsonApiDotNetCore.git -b gh-pages origin_site -q
        Copy-Item origin_site/.git _site -recurse
        Copy-Item CNAME _site/CNAME
        Copy-Item home/*.html _site/
        Copy-Item home/*.ico _site/
        Copy-Item -Recurse home/assets/* _site/styles/
        CD _site
        git add -A 2>&1
        git commit -m "Automated commit from cibuild" -q
        if (-Not $env:APPVEYOR_PULL_REQUEST_TITLE) {
            git push origin gh-pages -q
            echo "Documentation updated successfully."
        }
  artifacts:
  - path: .\**\artifacts\**\*.nupkg
    name: NuGet
  deploy:
  - provider: NuGet
    skip_symbols: false
    api_key:
      secure: OBYPCgp3WCuwkDRMuZ9a4QcBdTja/lqlUwZ+Yl5VHqooSJRVTYKP5y15XK0fuHsZ
    on:
      branch: master
      appveyor_repo_tag: true
  - provider: NuGet
    skip_symbols: false
    api_key:
      secure: OBYPCgp3WCuwkDRMuZ9a4QcBdTja/lqlUwZ+Yl5VHqooSJRVTYKP5y15XK0fuHsZ
    on:
      branch: /release\/.+/
      appveyor_repo_tag: true
- # Ubuntu
  matrix:
    only:
    - image: Ubuntu
  services:
  - docker
  before_build:
  - sh: |
      # Do not run the Azure Cosmos Emulator for Linux for now
      echo "Azure Cosmos Emulator for Linux is not being run at the moment"

      ## Start Azure Cosmos Emulator on Linux
      ## Pull Azure Cosmos Emulator Docker image
      #echo "Pulling Azure Cosmos Emulator Docker image for Linux ..."
      #bash ./pull-docker-azure-cosmos-emulator-linux.sh

      ## Start Azure Cosmos Emulator container
      #echo "Running Azure Cosmos Emulator Docker container ..."
      #nohup bash ./run-docker-azure-cosmos-emulator-linux.sh &

      ## Wait for Docker container being started in the background
      #echo "Waiting 60 seconds before trying to download Azure Cosmos Emulator SSL certificate ..."
      #sleep 60

      ## Print the background process output to see whether there are any errors
      #if [ -f "./nohup.out" ]; then
      #    echo "--- BEGIN CONTENTS OF NOHUP.OUT ---"
      #    cat ./nohup.out
      #    echo "--- END CONTENTS OF NOHUP.OUT ---"
      #fi

      ## Install SSL certificate to be able to access the emulator
      #echo "Installing Azure Cosmos Emulator SSL certificate ..."
      #sudo bash ./install-azure-cosmos-emulator-linux-certificates.sh

build_script:
- pwsh: |
    Write-Output ".NET version:"
    dotnet --version

    Write-Output "PostgreSQL version:"
    if ($IsWindows) {
        . "${env:ProgramFiles}\PostgreSQL\13\bin\psql" --version
    }
    else {
        psql --version
    }

    .\Build.ps1

test: off
